{"data":{"allMdx":{"nodes":[{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/index.mdx","frontmatter":{"title":"XEDI JavaScript SDK"},"rawBody":"---\ntitle: XEDI JavaScript SDK\ndescription: XEDI JavaScript Software Development Kit\nstatus: Experimental\n---\n\nimport {HeroLayout} from '@primer/gatsby-theme-doctocat'\nexport default HeroLayout\n","parent":{"__typename":"File","relativeDirectory":"","name":"index"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/usage/businesses.mdx","frontmatter":{"title":"Businesses"},"rawBody":"---\ntitle: Businesses\ndescription: Using the Businesses API\n---\n\nimport {BorderBox} from '@primer/components'\nimport {GithubIssue} from '../../src/components'\n\n<BorderBox>\n    <GithubIssue issue-id=\"25\" />\n</BorderBox>\n","parent":{"__typename":"File","relativeDirectory":"usage","name":"businesses"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/usage/auth.mdx","frontmatter":{"title":"Auth"},"rawBody":"---\ntitle: Auth\ndescription: Using the Auth API\nstatus: New\nsource: 'https://github.com/xedi/sdk-js/blob/master/src/Services/Auth.ts'\n---\n\nimport {Link} from '@primer/components'\nimport {CheckIcon} from '@primer/styled-octicons'\n\n# Introduction\n\nThe Auth api controls access to the system. Read more about our <Link href=\"/architecture/authentication\">authentication architecture here</Link>.\n\n# Events\n\nThis service emits events. To learn more about events <Link href=\"/architecture/events\">here</Link>.\n\n## auth_updated\n\nWhen the authentication state changes; `auth_updated` is emitted.\n\n```typescript\ntype AuthenticationUpdatedEvent {\n    method: string;\n    date: {\n        user: User;\n        business?: Business;\n        refresh_token: RefreshToken;\n        access_token: AccessToken;\n    }\n}\n```\n\n## auth_deleted\n\nWhen the authentication state is revoked; `auth_deleted` is emitted.\n\n```typescript\ntype AuthenticationDeletedEvent {\n    method: string;\n}\n```\n\n# Properties\n\n## business\n\nGets the current business context.\n\n```javascript\nconst currentBusiness: Business = Xedi.Auth.business;\n```\n\n## user\n\nGets the logged in user.\n\n```javascript\nconst currentUser: User = Xedi.Auth.user;\n```\n\n# Usage\n\n## login\n\n**Parameters**\n\n| Property | Type | Required | Example |\n| :-- | :-- | :-: | :-- |\n| email | String | <CheckIcon color=\"green.5\"/> | t.stark@avengers.org |\n| password | String | <CheckIcon color=\"green.5\"/> | izJ7Y0MBwcJ8 |\n\n**Usage**\n\n```javascript\nawait Xedi.Auth.login('t.stark@avengers.org', 'izJ7Y0MBwcJ8');\n```\n\n**Events**\n\nEmits `auth_updated` on successful authentication.\n\n**Response**\n\n```typescript\ntype AuthenticationResponse {\n    data: {\n        tokens: {\n            access: AccessToken;\n            refresh: RefreshToken;\n        };\n        user: User;\n    };\n}\n```\n\n## withToken\n\n**Parameters**\n\n| Property | Type | Required | Example |\n| :-- | :-- | :-: | :-- |\n| refreshToken | String | <CheckIcon color=\"green.5\"/> | eyJhbGciO6IkpXVCJ9.e30.Et9HFtf9RY7kkTX1wr4qCyhIf58U |\n\n**Usage**\n\n```javascript\nawait Xedi.Auth.withToken('eyJhbGciO6IkpXVCJ9.e30.Et9HFtf9RY7kkTX1wr4qCyhIf58U');\n```\n\n**Events**\n\nEmits `auth_updated` on successful authentication.\n\n**Response**\n\n```typescript\ntype AuthenticationResponse {\n    data: {\n        tokens: {\n            access: AccessToken;\n            refresh: RefreshToken;\n        };\n        user: User;\n        business?: Business;\n    };\n}\n```\n\n## refreshAccessToken\n\n**Parameters**\n\n`null`\n\n**Usage**\n\n```javascript\nawait Xedi.Auth.refreshAccessToken();\n```\n\n**Events**\n\nEmits `auth_updated` on successful renewal of the authentication state.\n\n**Response**\n\n```typescript\ntype AuthenticationResponse {\n    data: {\n        tokens: {\n            access: AccessToken;\n            refresh: RefreshToken;\n        };\n        user: User;\n        business?: Business;\n    };\n}\n```\n\n## switchContexts\n\n**Parameters**\n\n| Property | Type | Required | Example |\n| :-- | :-- | :-: | :-- |\n| business_uuid | String | <CheckIcon color=\"green.5\"/> | 92ac7274-9369-11ea-9521-01002da17977 |\n\n**Usage**\n\n```javascript\nawait Xedi.Auth.switchContexts('92ac7274-9369-11ea-9521-01002da17977');\n```\n\n**Events**\n\nEmits `auth_updated` on successful updating of the authentication context.\n\n**Response**\n\n```typescript\ntype AuthenticationResponse {\n    data: {\n        tokens: {\n            access: AccessToken;\n            refresh: RefreshToken;\n        };\n        user: User;\n        business: Business;\n    };\n}\n```\n\n## logout\n\nPerminently revoke your refresh token.\n\n**Parameters**\n\n`null`\n\n**Usage**\n\n```javascript\nawait Xedi.Auth.logout();\n```\n\n**Events**\n\nEmits `auth_deleted` on successful revocation of the refresh token.\n\n```json\n{\n    \"method\": \"logout\"\n}\n```\n\n**Response**\n\n`null`\n","parent":{"__typename":"File","relativeDirectory":"usage","name":"auth"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/usage/mailboxes.mdx","frontmatter":{"title":"Mailboxes"},"rawBody":"---\ntitle: Mailboxes\ndescription: Using the Mailboxes API\n---\n\nimport {BorderBox} from '@primer/components'\nimport {GithubIssue} from '../../src/components'\n\n<BorderBox>\n    <GithubIssue issue-id=\"26\" />\n</BorderBox>\n","parent":{"__typename":"File","relativeDirectory":"usage","name":"mailboxes"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/usage/products.mdx","frontmatter":{"title":"Products"},"rawBody":"---\ntitle: Products\ndescription: Using the Products API\n---\n\nimport {BorderBox} from '@primer/components'\nimport {GithubIssue} from '../../src/components'\n\n<BorderBox>\n    <GithubIssue issue-id=\"27\" />\n</BorderBox>\n","parent":{"__typename":"File","relativeDirectory":"usage","name":"products"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/usage/users.mdx","frontmatter":{"title":"Users"},"rawBody":"---\ntitle: Users\ndescription: Using the User API\n---\n\nimport {BorderBox} from '@primer/components'\nimport {GithubIssue} from '../../src/components'\n\n<BorderBox>\n    <GithubIssue issue-id=\"28\" />\n</BorderBox>\n","parent":{"__typename":"File","relativeDirectory":"usage","name":"users"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/tooling/debugging.mdx","frontmatter":{"title":"Debugging"},"rawBody":"---\ntitle: Debugging\ndescription: How to debug issues\nstatus: Experimental\nsource: https://github.com/xedi/sdk-js/blob/master/index.html\n---\n\nimport {Link} from '@primer/components'\n\nWhilst TypeScript helps us eliminate most of the silly bugs that vanilla JavaScript would allow, there is still room for mistakes to be made. To aid in the discover of these issues, there is a playground provided within the repository.\n\n## Starting the playground\n\nTo initialize the playground, simply run `npm run playground`. You should do this in a separate console window as this is a foreground task. This task will watch your `src` directory for changes, compiles them, and utilizing the `webpack-dev-server`, perform module hot swapping. When the command has finished it's first run, it should prompt you to open your browser to http://localhost:8080.\n\n## Preparing the playground\n\nWhen you open the playground in your browser, you will be presented with a form to configure the it. There will be three fields: API Gateway Address, Login (Email Address), and Password. At this time, Login and Password are required.\n\nOn successful authentication with your choice of API Gateway instance, the form will be replaced with a green tick and instructions to open DevTools and \"start hacking\".\n\n## Using the playground\n\nAs mentioned previous, you need to open your browsers DevTools. From here, you can enter a variety of commands into the console to interact with XEDI.js. A good first command might be retreiving your user record from the <Link href=\"/usage/auth#user\">Auth api</Link>.\n\n```javascript\nconst me = Xedi.Auth.user;\n```\n```javascript\n{\n    \"_id\": \"92ac7274-9369-11ea-9521-01002da17977\",\n    \"email\": \"t.stark@avengers.org\",\n    \"first_name\": \"Anthony\",\n    \"last_name\": \"Start\",\n    \"job_title\": \"Iron Man\",\n    \"contact_no\": \"(970) 517-1743 x67916\",\n    \"avatar\": \"https://assets.avengers.org/images/iron_man.png\",\n    \"created_at\": \"2020-05-11 10:27:03\",\n    \"updated_at\": \"2020-05-11 10:30:14\",\n    \"is_active\": 1\n}\n```\n\nWhen you done, terminate the server running in your console.\n","parent":{"__typename":"File","relativeDirectory":"tooling","name":"debugging"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/development/configuration.mdx","frontmatter":{"title":"Configuration"},"rawBody":"---\ntitle: Configuration\ndescription: Accessing and managing configuration\nstatus: New\nsource: 'https://github.com/xedi/sdk-js/blob/master/src/Config/Config.ts'\n---\n\nimport {Flash} from '@primer/components'\nimport {GithubIssue, ExternalLink} from '../../src/components'\n\nA key goal of this SDK is that it manages it's configuration as transparently as possible; but without the need for human intervention. This means that you should be able to access and modify any configuration value, at any time, and the internals of the SDK should respect your updated values.\n\n<Flash variant=\"info\">\n    <GithubIssue issue-id=\"1\" />\n</Flash>\n\nUnder the hood, the Config Bag is a standard JavaScript <ExternalLink href=\"https://tc39.es/ecma262/#sec-map-objects\" title=\"Map specification\">Map</ExternalLink>\n","parent":{"__typename":"File","relativeDirectory":"development","name":"configuration"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/development/api.mdx","frontmatter":{"title":"API Classes"},"rawBody":"---\ntitle: API Classes\ndescription: Adding & Modifying API Classes\nstatus: Stable\nsource: 'https://github.com/xedi/sdk-js/blob/master/src/Services/Service.ts'\n---\n\nimport {Flash, Link, Text, BorderBox} from '@primer/components'\nimport {Caption, Container} from '@primer/gatsby-theme-doctocat'\nimport {InfoIcon} from '@primer/styled-octicons'\nimport InlineCode from '@primer/gatsby-theme-doctocat/src/components/inline-code'\nimport {GithubIssue} from '../../src/components'\n\n# Adding API Classes\n\nThere are three main stages to adding a API class:\n\n1. Definition\n2. Resolution\n3. Invocation\n\n## Definition\n\nWithin the `src/Services/` directory you should find a number of files. Most notable for us is the `Service.ts` and `Services.ts` files.\n\n<BorderBox mb={2}>\n    <GithubIssue issue-id=\"24\" />\n</BorderBox>\n\n`Service.ts` is the abstract class from which all our \"Service\" classes extend. It is responsible for the construction of the class, for handling the <Link href=\"architecture/events\">classes events</Link>, and holding memory references to the <Link href=\"architecture/configuration\">config bag</Link> and the <Link href=\"architecture/http_requests\">HTTP client</Link>.\n\nWithin `src/Services` create a new file with the same name as the entity it will host. For example, `Example.ts` should look like this:\n\n```typescript\nimport Service from  './Service';\n\n\n/**\n * Example class\n */\nclass Example extends Service\n{\n}\n\nexport default Example;\n```\n\n## Resolution\n\nRemember `src/Services/Services.ts`? This is the first step of building the resolution root for our new class.\n`Services.ts` exports a TypeScript namespace, which allows use to easily import all our \"Services\" into our main class.\n\nFirstly, import your newly created \"Service\" class.\n\n```diff\ndiff a/src/Services/Services.ts b/src/Services/Services.ts\n import Accounts from './Accounts';\n+import Example from './Example';\n```\n\nThen, you should add the imported class to the end of the `export` object.\n```diff\ndiff a/src/Services/Services.ts b/src/Services/Services.ts\n     Accounts,\n-}\n+    Example,\n+}\n```\n\nNext, you need to register your <Link href=\"architecture/singletons\">singleton</Link>. This will ensure configuration and state persistence.\n\n## Invocation\n\nThis is where things start to come together. Locate `src/index.ts` and open it. Inside here, you will find our root object. It is the home of our application container.\n\nThe first step here is to register a <Link href=\"architecture/singletons\">singleton</Link> for your \"Service\" class.\nFind the `boot` method, and go to the bottom of that method. Here we are going to add a binding that the container will use to build a single instance of your class.\n\n```typescript\nthis.singleton(\n    'services.example',\n    (app: ContainerInterface, config: Config) => {\n        return new Services.Example(\n            config,\n            app.resolve('client')\n        );\n    }\n);\n```\n\nThe counterpart to this registration is the resolution of its abstract definition; here `'services.example'`.\n\nNear the bottom of the root `Xedi` class, add the following function.\n\n```typescript\nstatic get Example(): Services.Example\n{\n    return this.resolveInstance()\n        .resolve('services.example');\n}\n\n```\n\nCongratulations! You can now resolve you new class. If you want, go ahead and jump into the <Link href=\"tooling/debugging\">playground</Link> and type `Xedi.Example`. It should resolve you an instance of your new class and inside, you will find a <Link href=\"architecture/config\">config bag</Link> and a <Link href=\"architecture/http_requests\">HTTP client</Link>.\n\n# Modifying API Classes\n\nYou want to start giving your class some abilities. Depending on your situation you might be adding a series of CRUD endpoints, or something entirely different. In most cases, you will be sending HTTP requests to an instance of the XEDI API Gateway. Most endpoints are the same, but there will be a few caveats and edge-cases. Consider the following examples:\n\n```typescript\nlist() {\n    return this.client\n        .get<JsonResponse<Example>>(`1/examples`)\n        .then((response: AxiosResponse<JsonResponse<Example>>) => {\n            return response.data.data;\n        });\n}\n```\n<Caption>An indexing method</Caption>\n\nLets look at line three of the above example. In JavaScript this would look like <InlineCode>.get('1/examples')</InlineCode>, so whats the extra stuff? This how we tell TypeScript, what we expect the <Link href=\"architecture/http_requests\">HTTP Client</Link> to return in the promise. Here we tell it we want a `JsonResponse` which itself, must contain an `Example`.\n\n<Flash varient=\"info\" mb={2}>\n<Text fontWeight=\"bold\"><InfoIcon /> What is an <InlineCode>Example</InlineCode>?</Text>\n\nIn this instance, Example is a <Link href=\"development/models\">model</Link>. A model is a simple definition of the data structure we expect. If you aren't familiar with this concept, read the section on <Link href=\"development/models\">models</Link>.\n</Flash>\n\nOn line four, we see that our response expectation is defined again, but this time within an <Link href=\"architecture/http_requests\"><InlineCode>AxiosResponse</InlineCode></Link>. Translated to plain english this reads: <Text as=\"em\">Where <InlineCode>response</InlineCode> is a JSON representation of a Example within an AxiosResponse</Text>. Again, at runtime, this compiles down to nothing, but here in TypeScript it helps us understand the intent of the code.\n","parent":{"__typename":"File","relativeDirectory":"development","name":"api"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/development/events.mdx","frontmatter":{"title":"Events"},"rawBody":"---\ntitle: Events\ndescription: Decoupled information sharing\nstatus: Experimental\nsource: 'https://github.com/xedi/sdk-js/blob/master/src/Services/Service.ts'\n---\n\nimport {Link, Flash} from '@primer/components'\nimport {Caption} from '@primer/gatsby-theme-doctocat'\nimport {InfoIcon} from '@primer/styled-octicons'\nimport {ExternalLink} from '../../src/components'\n\nEvents are a mechanism supporting decoupled communication between components. They are part of the underlying <Link href=\"/development/api\">API abstract class</Link> meaning they are available to all child classes. The usage for Events is simple and familiar.\n\nOn a given service, you can subscribe to a topic using the `on()` method, or you can fire an event using `trigger()`.\n\nThe best example of this is the usage as part of the <Link href=\"/architecture/authentication\">authentication flow</Link>.\n\nIn a number of the methods within the Auth API, the `trigger()` method is called.\n```javascript\nthis.trigger('auth_updated', {\n    method: 'switch_context',\n    data: {\n        user: body.data.user,\n        business: body.data.business,\n        refresh_token: body.data.tokens.refresh,\n        access_token: body.data.tokens.access,\n    }\n});\n```\n<Caption>\n    <ExternalLink href=\"https://github.com/xedi/sdk-js/blob/master/src/Services/Auth.ts#L144\">\n        Auth.switchContexts\n    </ExternalLink>\n</Caption>\n\nSubscribing to the `auth_updated` topic is also as straightforward as this.\n```javascript\nXedi.Auth.on('auth_updated', (event) => {\n    console.log(`Auth state updated by ${ event.model }`);\n    console.log(`Current user: ${ event.data.user.first_name });\n    if (event.data.hasOwnProperty('business')) {\n        console.log(`Current business: ${ event.data.business.name }`);\n    }\n});\n```\n<Flash><InfoIcon mr={2}/>These are not DOMEvents, nor do they implement the JavaScript Event interface.</Flash>\n","parent":{"__typename":"File","relativeDirectory":"development","name":"events"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/development/models.mdx","frontmatter":{"title":"Models"},"rawBody":"---\ntitle: Models\ndescription: Added & Modifying Models\nstatus: Stable\nsource: https://github.com/xedi/sdk-js/tree/master/src/Models\n---\n\nimport {Text, Link} from '@primer/components'\nimport {FileCodeIcon, CodeIcon} from '@primer/styled-octicons'\n\nModels mean a lot of things to alot of people. Here, they are simple definitions of the data we expect when we refer to a certain entity. At runtime, they provide little benefit, however, in TypeScript, they can help us understand the code that uses them, and ensures we use the correct attribute names when interacting with the data.\n\n## Authoring a Model\n\nModels can be found in the `src/Models` directory. Model files <Text as=\"em\">should</Text> be in title-case, for example `Example.ts` rather than `example.ts`. These files should also then be imported into `Models.ts` and added to the union type defining `Models`.\n\nLets break down the User model and examine how its built.\n\n```typescript\nimport Xuid, { SupportedXuid } from '../Utils/Xuid';\n\n\n/**\n * User\n */\nexport default interface User extends Object {\n    _id: Xuid<SupportedXuid.User>;\n    first_name: string;\n    last_name: string;\n    email: string;\n    contact_no?: number;\n    job_title?: string;\n    avatar?: string;\n    is_active: boolean;\n}\n```\n<Link href=\"https://github.com/xedi/sdk-js/blob/master/src/Models/User.ts\" lineHeight=\"condensedUltra\" fontSize={1}>\n    <CodeIcon mr={2}/>\n    View Source\n</Link>\n\n* Note that whilst this looks like your everyday household JavaScript object, after each line, there is a semi-colon. This tells TypeScript that we have finished defining that attribute.\n* Some attributes have a `?` at the end of the attribute name. This denotes that it is optional.\n* `_id` is using a custom type definition. It is an <Link href=\"/development/utilities#xuid\">XUID</Link> of type `User` as enumerated by the <Link href=\"/development/utilities#supported-xuid\">SupportedXuid</Link> enum.\n","parent":{"__typename":"File","relativeDirectory":"development","name":"models"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/architecture/authentication.mdx","frontmatter":{"title":"Authentication"},"rawBody":"---\ntitle: Authentication\ndescription: XEDI Authentication Flow\n---\nimport {BorderBox, Text} from '@primer/components'\nimport {ExternalLink, GithubIssue} from '../../src/components'\n\n## Background\n\n### Rationale\n\nSecurity is of paramount importance. Customers trust XEDI with sensitive business data, and legislation such as the <ExternalLink href=\"http://www.legislation.gov.uk/ukpga/2018/12/contents/enacted\">Data Protection Act 2018</ExternalLink> obligate XEDI to ensure the maximum possible security of data and best practices for access. For more information on these obligations, read <ExternalLink href=\"https://ico.org.uk/for-organisations/guide-to-data-protection/guide-to-the-general-data-protection-regulation-gdpr/\">this guide from the Information Commissioners Office</ExternalLink>.\n\nAs part of these obligations, we've not only looked at current best practices, but also industry futures. Many names within the authentication tech-space are moving to using JWT tokens as part of the Open Authentication 2.0 standard. As such we have chosen JWT tokens as our defacto authentication mechanism.\n\n### Tokens\n\nWhen you authenticate with an API Gateway, you will be provisioned two <ExternalLink href=\"https://tools.ietf.org/html/rfc7519\">JWT tokens</ExternalLink>. These are known as short-life tokens and are considered to be more secure than traditional OAuth tokens.\n\nThe first token, the <Text as=\"em\">Access Token</Text> is the token which should be sent in the `Authenticate` header using the <ExternalLink href=\"https://tools.ietf.org/html/rfc6750\">`Bearer` scheme</ExternalLink>.\n\nThe second, and most important is the <Text as=\"em\">Refresh Token</Text>. This should be kept safe and only used when prompted. As the name suggests it is used to securely generate new access tokens when your current one expires. To ensure this not subject to \"replay attacks\", refresh tokens are single use. Once it is used, it is revoked and a new one issued.\n\nFor extra security, our tokens are also encrypted. This means that the signature part of the token is encrypted using 4096-bit encryption. The signature hashes the payload and headers of the token, which prevents the token from being manipulated by a third-party.\n\n## Token Lifecycle\n\n<BorderBox>\n    <GithubIssue issue-id=\"30\" />\n</BorderBox>\n\n- One authenticated successfully, access and refresh tokens will be issued to the user.\n- The user should use the access token in the `Authenticate` header for every request.\n- When the access token expires, any request it is used with will respond with a `401 Not Authorized` error.\n  - Within the responses headers will be the `WWW-Authenticate` header providing detail of the error.\n    - If the token is expired, the refresh token should be sent to `1/api/auth/token` using the `POST` verb.\n    - If the token is invalid, the refresh token should be sent to `1/api/auth/token` using the `POST` verb.\n    - New tokens will be issued to the user if the refresh token is valid.\n- If the refresh token itself is invalid, expired or revoked, the user should re-authenticate.\n","parent":{"__typename":"File","relativeDirectory":"architecture","name":"authentication"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/architecture/http_requests.mdx","frontmatter":{"title":"HTTP Requests"},"rawBody":"---\ntitle: HTTP Requests\ndescription: How are HTTP requests handled\nsource: https://github.com/axios/axios\nstatus: Stable\n---\n\nimport {Flash} from '@primer/components'\nimport {InfoIcon} from '@primer/styled-octicons'\n\nXEDI.js includes Axios in its bundle. It is contained so should not interfere with other instances of Axios you may be running.\n\nAxios allows XEDI.js to be used in browsers and (in theory) in Node.js applications.\n\n<Flash scheme=\"yellow\" mb={2}>\n    <InfoIcon mr={1} /> Node.js applications aren't currently supported.\n</Flash>\n\nJust like the API classes, XEDI.js uses an instance of Axios.\n","parent":{"__typename":"File","relativeDirectory":"architecture","name":"http_requests"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/architecture/singletons.mdx","frontmatter":{"title":"Singletons"},"rawBody":"---\ntitle: Singletons\ndescription: Ensuring configuration persistence in a static world.\nstatus: Stable\nsource: https://github.com/xedi/sdk-js/blob/src/Container/Container.ts\n---\n\nimport {Caption} from '@primer/gatsby-theme-doctocat'\nimport {Flash,Text} from '@primer/components'\nimport {InfoIcon} from '@primer/styled-octicons'\nimport InlineCode from '@primer/gatsby-theme-doctocat/src/components/inline-code'\n\nTo maintain configuration and state, whilst making the API easy to use, singletons have been employed. This section will go demonstrate the usage of this pattern within the SDK and provide guidance on its use for development.\n\n## Registration\n\nTo use register a singleton for use, first it needs a factory function binding to the `Container` instance.\n\n```typescript\nthis.singleton('myclass', function (app: ContainerInterface, config: Config) {\n    return new MyClass();\n});\n```\n<Caption>Binding a factory function to the abstract key 'myclass'</Caption>\n\nThe factory function takes two parameters, the `Container` instance and an instance of the `Config` bag. What is returned is known as the \"Concrete\" instance.\n\nThe \"abstract\" is the key that the binding will be accessible by. This should be a string that is unique to this factory.\n\n<Flash scheme=\"yellow\">\n    <InfoIcon mr={1} />Binding an abstract with a non-unique name will overwrite the previous factory\n</Flash>\n\n## Resolution\n\nRetrieving an instance from the `Container` is simple.\n\n```typescript\nthis.resolve<MyClass>('myclass');\n```\n<Caption>Retrieving an instance of MyClass from the Container</Caption>\n\nWhen a Concrete instance is returned, it is stored within the `Container` against the abstract. The next time the `resolve` method is run, it will retrieve the concrete instance from the store.\n\n## Resetting\n\nIt is sometimes necessary to refresh a concrete instance.\n\n```typescript\nthis.resetInstance('myclass');\n```\n<Caption>Resetting 'myclass'</Caption>\n\nInvoking <InlineCode>resetInstance</InlineCode> will clear the concrete instance from the store, and then invoke the associated factory.\n\n<Flash>\n    <InfoIcon mr={1} /><Text>Don't confuse <InlineCode>resolveInstance</InlineCode> and <InlineCode>resolve</InlineCode>. <InlineCode>resolveInstance</InlineCode> is a state method which can be used to resolve the active container for static methods.</Text>\n\n```typescript\nstatic get MyClass(): MyClass {\n    return this.resolveInstance()\n        .resolve('myclass');\n}\n```\n<Caption>Resolving 'myclass' statically</Caption>\n</Flash>\n","parent":{"__typename":"File","relativeDirectory":"architecture","name":"singletons"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/usage/accounts.mdx","frontmatter":{"title":"Accounts"},"rawBody":"---\ntitle: Accounts\ndescription: Using the Accounts API\nstatus: New\nsource: 'https://github.com/xedi/sdk-js/blob/master/src/Services/Accounts.ts'\n---\n\nimport {CheckIcon} from '@primer/styled-octicons'\n\n## Introduction\n\nThe Accounts API allows you to register, and verify a user account.\n\n## Usage\n\n### Register\n\nRegister a User Account\n\n**Parameters**\n\n| Property | Type | Required | Example |\n| :-- | :-- | :-: | :-- |\n| email | String | <CheckIcon color=\"green.5\"/> | t.stark@avengers.org |\n| first_name | String | <CheckIcon color=\"green.5\"/> | Anthony |\n| last_name | String | <CheckIcon color=\"green.5\"/> | Stark |\n| password | String | <CheckIcon color=\"green.5\"/> | izJ7Y0MBwcJ8 |\n| contact_no | String | | (970) 517-1743 x67916 |\n| job_title | String | | Iron Man |\n| avatar | String | | https://assets.avengers.org/images/iron_man.png |\n\n**Usage**\n\n```javascript\nconst user = await Xedi.Accounts.register({\n    email: 't.stark@avengers.org',\n    first_name: 'Anthony',\n    last_name: 'Stark',\n    password: 'izJ7Y0MBwcJ8',\n    contact_no: '(970) 517-1743 x67916',\n    job_title: 'Iron Man',\n    avatar: 'https://assets.avengers.org/images/iron_man.png'\n});\n```\n\n**Response**\n\n```json\n{\n    \"_id\": \"92ac7274-9369-11ea-9521-01002da17977\",\n    \"email\": \"t.stark@avengers.org\",\n    \"first_name\": \"Anthony\",\n    \"last_name\": \"Stark\",\n    \"job_title\": \"Iron Man\",\n    \"contact_no\": \"(970) 517-1743 x67916\",\n    \"avatar\": \"https://assets.avengers.org/images/iron_man.png\",\n    \"created_at\": \"2020-05-11 10:27:03\",\n    \"is_active\": 0\n}\n```\n---\n### Verify\n\nVerify the email address attached to a User account.\n\n**Parameters**\n\n| Property | Type | Required | Example |\n| :-- | :-- | :-: | :-- |\n| verificationToken | String | <CheckIcon color=\"green.5\"/>︎ | de99a620c50f2990e87144735cd357e7\n\n**Usage**\n\n```javascript\nconst user = Xedi.Accounts.verify('de99a620c50f2990e87144735cd357e7');\n```\n\n**Response**\n\n```json\n{\n    \"_id\": \"92ac7274-9369-11ea-9521-01002da17977\",\n    \"email\": \"t.stark@avengers.org\",\n    \"first_name\": \"Anthony\",\n    \"last_name\": \"Start\",\n    \"job_title\": \"Iron Man\",\n    \"contact_no\": \"(970) 517-1743 x67916\",\n    \"avatar\": \"https://assets.avengers.org/images/iron_man.png\",\n    \"created_at\": \"2020-05-11 10:27:03\",\n    \"updated_at\": \"2020-05-11 10:30:14\",\n    \"is_active\": 1\n}\n```\n","parent":{"__typename":"File","relativeDirectory":"usage","name":"accounts"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/development/utilities.mdx","frontmatter":{"title":"Utilities"},"rawBody":"---\ntitle: Utilities\ndescription: Helper functions and classes\nstatus: Stable\nsource: https://github.com/xedi/sdk-js/tree/master/src/Utils\n---\n\nimport {Link, Text} from '@primer/components'\nimport {CodeIcon} from '@primer/styled-octicons'\nimport {Caption} from '@primer/gatsby-theme-doctocat'\nimport {ExternalLink} from '../../src/components'\n\nThe <ExternalLink href=\"https://github.com/xedi/sdk-js/tree/master/src/Utils\">`Utils`</ExternalLink> directory contains a number of classes which provide help functionality or features when developing aspects of the SDK.\n\n## AuthenticateHeaderParser\n\nAs part of our <Link href=\"/architecture/authentication\">authentication flow</Link> the <ExternalLink href=\"https://tools.ietf.org/html/rfc6750#page-9\">`WWW-Authenticate` header</ExternalLink> is returned from the API Gateway. This is provided to us as a single string which makes it difficult to parse.\n```\nBearer realm=\"api.xedi\",\n    error=\"invalid_token\",\n    error_description=\"The access token expired\"\n```\n<Caption>Example WWW-Authenticate header</Caption>\n<Text as=\"p\" mb={3}>To simplify the logic of interogating this string, the `AuthenticateHeaderParser` was devised.</Text>\n\n```javascript\nconst authenticateHeader = AuthenticateHeaderParser.parse(\n    headers['www-authenticate']\n);\n\nauthenticateHeader.realm; // \"api.xedi\"\n\nauthenticateHeader.error; // \"invalid_token\"\n\nauthenticateHeader.error_description; // \"The access token expired\"\n```\n\n<ExternalLink href=\"https://github.com/xedi/sdk-js/blob/master/src/Utils/AuthenticateHeaderParser.ts\"><CodeIcon mr={1} />View source</ExternalLink>\n\n## XUID\n\nIdentifing Entities without explicit type attributes across an eco-system like XEDI is problematic at best, impossible in the main. At XEDI, we found the answer by introducing an identifier that could be typed. <ExternalLink href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)\">Version 1 UUIDs</ExternalLink> are considered inherently insecure due to the use of the issuing computers MAC address as the \"node\" component. We seized this vulnerability and turned it on it's head by replacing the node of a UUIDv1 with our own series of hashes. Each hash is tied to an identifier which a service can use to determine what a generic entity is.\n\n<ExternalLink href=\"https://github.com/xedi/sdk-js/blob/master/src/Utils/Xuid.ts\"><CodeIcon mr={1} />View source</ExternalLink>\n\n## Supported XUIDs\n\nAs above, at XEDI we utilitize a series of known hashes to identify anonymized json objects as certain entities. In TypeScript, we represent these as an Enum known as SupportedXuid. Because this has little to no practical runtime use, we don't include the associated hashes with the inclusion of a supported type.\n\n<ExternalLink href=\"https://github.com/xedi/sdk-js/blob/master/src/Utils/Xuid.ts\"><CodeIcon mr={1} />View source</ExternalLink>\n","parent":{"__typename":"File","relativeDirectory":"development","name":"utilities"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/about/getting-started.mdx","frontmatter":{"title":"Getting Started"},"rawBody":"---\ntitle: Getting Started\ndescription: Getting started with XEDI.js\n---\n\nimport {Flash, Link, BorderBox} from '@primer/components'\nimport {InfoIcon} from '@primer/styled-octicons'\nimport {ExternalLink, GithubIssue} from '../../src/components'\n\n## Installation\n\n<Flash mb={2}>\n    <InfoIcon ml={1} /> XEDI.js is currently published to the GitHub Package Repository. You can find out more about the GitHub Package Repository <ExternalLink href=\"https://help.github.com/en/packages\">here</ExternalLink>.\n    <BorderBox mt={1} bg=\"white\">\n        <GithubIssue issue-id=\"29\" />\n    </BorderBox>\n</Flash>\n\n**Using NPM**\n\n```shell\nnpm install @xedi/sdk-js\n```\n\nXEDI.js also ships with TypeScript typings!\n\n## Configuration\n\nYou can configure the SDK using the `Xedi.Config` class. This class extends a JavaScript `Map` object, so the usual `get`, `set`, and `delete` methods will work as per the original object. For example, you can configure which `base_url` should be used to contact a API Gateway instance.\n\n```javascript\nXedi.Config.set('base_url', 'https://api.staging.xedi.com');\n```\n\nBelow you will find a list of all configurations.\n\n| Configuration | Default Value | Comments |\n|--------------|---------------|----------|\n| `base_url` | `https://api.xedi.com` | |\n| `refresh_token` | | Set and managed by `Xedi.Auth` |\n| `access_token` | | Set and managed by `Xedi.Auth` |\n| `mode` | `production` | |\n\nLearn more about using the `Xedi.Config` class <Link href=\"development/configuration\">here</Link>.\n","parent":{"__typename":"File","relativeDirectory":"about","name":"getting-started"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/development/logging.mdx","frontmatter":{"title":"Logging"},"rawBody":"---\ntitle: Logging\ndescription: Accessing the runtime console API\nstatus: New\nsource: https://github.com/xedi/sdk-js/blob/master/src/Logger/LogManager.ts\n---\n\nimport { ExternalLink, SourceLink } from '../../src/components'\nimport InlineCode from '@primer/gatsby-theme-doctocat/src/components/inline-code'\n\nFrom time to time, it is permissible to provide user feedback via the runtimes <ExternalLink href=\"https://developer.mozilla.org/en-US/docs/Web/API/Console\">Console API</ExternalLink>. The primary usecase is to provide detailed error tracking in production or staging environments, and technical feedback in development environments.\n\nTo ensure the relevant information is displayed, the `LogManager` provides three methods of outputting to the console:\n1. All environments\n1. Development environment only\n1. Non-development environments\n\n## Configuration\n\nThe `LogManager` uses the `mode` configuration value which defaults to `production`. If you are in a development environment set `mode` to `local`.\n\n## Usage\n\n<SourceLink href=\"https://github.com/xedi/sdk-js/blob/master/src/Logger/LogManager.ts\"><InlineCode>LogManager</InlineCode></SourceLink>, <SourceLink href=\"https://github.com/xedi/sdk-js/blob/master/src/Logger/Logger.ts\"><InlineCode>Logger</InlineCode></SourceLink> and <SourceLink href=\"https://github.com/xedi/sdk-js/blob/master/src/Logger/NullLogger.ts\"><InlineCode>NullLogger</InlineCode></SourceLink> all implement the <SourceLink href=\"https://github.com/xedi/sdk-js/blob/master/src/Interfaces/Logger.ts\"><InlineCode>LoggerInterface</InlineCode></SourceLink> which requires implementations of 5 of the Console API's functions:\n\n- `log`\n- `error`\n- `debug`\n- `info`\n- `warn`\n\nThese all have the same method signature as the Console API.\n```typescript\n/**\n * Logger\n */\ninterface Logger {\n    log(message?: any, ...optionalParams: any[]): void;\n    info(message?: any, ...optionalParams: any[]): void;\n    debug(message?: any, ...optionalParams: any[]): void;\n    error(message?: any, ...optionalParams: any[]): void;\n    warn(message?: any, ...optionalParams: any[]): void;\n};\n```\n\nTo output to the console only in a development environment use the `DevelopmentLogger`.\n\n```javascript\nthis.logger.dev.log(\n    'These are not the droids you are looking for',\n    droids\n);\n```\n\nTo output to the console only in a non-development environments use the `ProductionLogger`.\n\n```javascript\nthis.logger.production.log(\n    'These are not the droids you are looking for',\n    droids\n);\n```\n\nFinally, to output to the console in all environments use the LogManager.\n\n```javascript\nthis.logger.log(\n    'These are not the droids you are looking for',\n    droids\n);\n```\n\n## Registration\n\nThe `LogManager` is registered as `logger` against the application `Container`. It is also exposed statically as `Log`.\n\n```javascript\nXedi.Log.dev.log(\n    'These are not the droids you are looking for',\n    droids\n);\n```\n","parent":{"__typename":"File","relativeDirectory":"development","name":"logging"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/tooling/build.mdx","frontmatter":{"title":"Build tooling"},"rawBody":"---\ntitle: Build tooling\ndescription: Introduction to building\nstatus: Stable\nsource: https://github.com/xedi/sdk-js/blob/master/package.json\n---\n\nimport {BorderBox} from '@primer/components'\nimport {GithubIssue} from '../../src/components'\n\n<BorderBox>\n    <GithubIssue issue-id=\"37\" />\n</BorderBox>\n","parent":{"__typename":"File","relativeDirectory":"tooling","name":"build"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/tooling/linting.mdx","frontmatter":{"title":"Linting"},"rawBody":"---\ntitle: Linting\ndescription: Finding codesmell\nstatus: Stable\nsource: https://github.com/xedi/sdk-js/blob/master/package.json\n---\n\nimport {BorderBox} from '@primer/components'\nimport {GithubIssue} from '../../src/components'\n\n<BorderBox>\n    <GithubIssue issue-id=\"45\" />\n</BorderBox>\n","parent":{"__typename":"File","relativeDirectory":"tooling","name":"linting"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/usage/workflows.mdx","frontmatter":{"title":"Workflows"},"rawBody":"---\ntitle: Workflows\ndescription: Using the Workflows API\nstatus: New\nsource: https://github.com/xedi/sdk-js/blob/master/src/Services/Workflows.ts\n---\n\nimport {BorderBox} from '@primer/components'\nimport {GithubIssue} from '../../src/components'\n\n<BorderBox>\n    <GithubIssue issue-id=\"41\" />\n</BorderBox>\n","parent":{"__typename":"File","relativeDirectory":"usage","name":"workflows"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/tooling/testing.mdx","frontmatter":{"title":"Testing"},"rawBody":"---\ntitle: Testing\ndescription: How to test your code\nstatus: Stable\nsource: https://github.com/xedi/sdk-js/tree/master/testing\n---\n\nimport {Text, Link, Flash, BorderBox} from '@primer/components'\nimport {InfoIcon} from '@primer/styled-octicons'\nimport InlineCode from '@primer/gatsby-theme-doctocat/src/components/inline-code'\nimport {ExternalLink, GithubIssue} from '../../src/components'\nimport {Caption} from '@primer/gatsby-theme-doctocat'\n\nTesting our code often feels like a chore, or something we leave until last. For most, testing is the mashed potatoes of development. It makes up the majority of the task and isn't the most attractive thing on our plate.\n\nIn this section we'll look at using unit tests to test our code to provide confidence that any changes we make don't break other behaviours within the SDK.\n\n<Flash>\n    <InfoIcon mr={2} />\n    If you are looking for information on manual testing, read the <Link href=\"/tooling/debugging\">debugging</Link> section.\n</Flash>\n\n## Directory Structure\n\nTesting (at the time of writing) focusses on the behaviors of the SDK, rather than a broad spread approach. This maps to how the files and directories are structured. Rather than mimicking the `src` directory structure, the directories are structured based on the hierarchy at runtime. So for `Xedi.Auth`, you would find those tests in `tests/Unit/Auth` and so on.\n\nThrough-out this page, I will continue to use Marvel's Avengers as a subject material. I'm going to test an API that lists the members of the Avengers.\n\nFirst I need a directory, so I will create `tests/Unit/Avengers`.\n\nNext I need to test each function in my Avengers API. At present I have one function, `list()`, so I create `List.test.ts` in my `Avengers` directory.\n\n## Authoring a test\n\nOnce I have my file, I can start writing my test. Because we are using <ExternalLink href=\"https://mochajs.org/\">MochaJS</ExternalLink> as a testing framework we get a couple of functions included by default.\n\n```typescript\nimport { assert } from 'chai';\nimport { Collection, Avenger } from '../../../src/Models/Models';\nimport Avengers from '../../../src/Services/Avengers';\nimport Axios, { AxiosInstance } from 'axios';\nimport Config from '../../../src/Config/Config;\nimport JsonResponse from '../../../src/Interfaces/JsonResponse;\nimport nock from 'nock';\n\ndescribe('Avengers@list', () => {\n    it('should return a list of avengers', async () => {\n        const positiveResponse: JsonResponse<Collection<Avenger>> = {\n            data: [\n                {\n                    \"_id\": 1,\n                    \"email\": \"t.stark@avengers.org\",\n                    \"first_name\": \"Anthony\",\n                    \"last_name\": \"Stark\",\n                    \"job_title\": \"Iron Man\"\n                },\n                {\n                    \"_id\": 2,\n                    \"email\": \"s.rogers@avengers.org\",\n                    \"first_name\": \"Steve\",\n                    \"last_name\": \"Rogers\",\n                    \"job_title\": \"Captain America\"\n                }\n            ]\n        };\n\n        nock(\"https://api.xedi.com\")\n            .get(\"/1/avengers\")\n            .reply(200, positiveResponse);\n\n        const configBag = new Config();\n        const httpClient: AxiosInstance = new Axios({\n            baseUrl: 'https://api.xedi.com'\n        });\n\n        const avengersAPI = new Avengers(configBag, httpClient);\n\n        const result = await avengersApi.list();\n\n        assert.isArray(result);\n        assert.lengthOf(result, 2);\n    });\n});\n```\n<Caption>tests/Unit/Avengers/List.test.ts</Caption>\n\nLets examine this test.\n\n* Below the `import` statements is the entrypoint for the framework. In this file we are describing the list functionality of the Avengers API. Therefore, `Avengers@list` is what will appear in the results output.\n\n* We have one behavioural test, in which we assert `it should return a list of avengers`. Because this method contains a <Text as=\"em\">asynchronous</Text> http request, we denote that the this test is also asynchronous with the `async` keyword.\n\n* Personal preference, I have added a fixture at the top of the test. This could easily be done inline or in a separate file.\n\n* We use <ExternalLink href=\"https://github.com/nock/nock\">Nock</ExternalLink> to intercept requests to the API Gateway and return predefined responses to matching endpoints.\n\n* We then need to setup our class. This concludes the the setup phase of our tests.\n\n* We invoke the subject function `list()` and assign the response to a `const` value.\n\n* We enter the assert phase, and utilize functions from <ExternalLink href=\"https://chaijs.com\">Chai.js</ExternalLink> to test the response.\n\n<Flash scheme=\"yellow\">\n    <InfoIcon mr={2}/>\n    It's important to remember that Mocha will pass any test that doesn't error. This is the primary reason I've used <InlineCode>async/await</InlineCode> rather than <InlineCode>then/catch</InlineCode>.\n</Flash>\n\n## Running your test\n\nNow that I've written my test, lets see if it will run. Simply run: <InlineCode>npm run test</InlineCode>.\n\nI will also check my code conforms to best-practice. For this run: <InlineCode>npm run lint:tests</InlineCode>. If you want to know more about this, read the section on <Link href=\"/tooling/linting\">Linting</Link>.\n\n## Coverage Reports\n\n<BorderBox>\n    <GithubIssue issue-id=\"46\" />\n</BorderBox>\n","parent":{"__typename":"File","relativeDirectory":"tooling","name":"testing"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/about/contributing.mdx","frontmatter":{"title":"Contributing"},"rawBody":"---\ntitle: Contributing\ndescription: How to contribute to XEDI.js\n---\n\nimport { GithubIssue } from '../../src/components'\n\n<GithubIssue issue-id=\"44\" />\n","parent":{"__typename":"File","relativeDirectory":"about","name":"contributing"}}]}}}