{"data":{"allMdx":{"nodes":[{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/index.mdx","frontmatter":{"title":"XEDI JavaScript SDK"},"rawBody":"---\ntitle: XEDI JavaScript SDK\ndescription: XEDI JavaScript Software Development Kit\nstatus: Experimental\n---\n\nimport {HeroLayout} from '@primer/gatsby-theme-doctocat'\nexport default HeroLayout\n","parent":{"__typename":"File","relativeDirectory":"","name":"index"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/architecture/authentication.mdx","frontmatter":{"title":"Authentication"},"rawBody":"---\ntitle: Authentication\ndescription: XEDI Authentication Flow\n---\n","parent":{"__typename":"File","relativeDirectory":"architecture","name":"authentication"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/architecture/singletons.mdx","frontmatter":{"title":"Singletons"},"rawBody":"---\ntitle: Singletons\ndescription: Ensuring configuration persistence in a static world.\n---\n","parent":{"__typename":"File","relativeDirectory":"architecture","name":"singletons"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/architecture/http_requests.mdx","frontmatter":{"title":"HTTP Requests"},"rawBody":"---\ntitle: HTTP Requests\ndescription: How are HTTP requests handled\n","parent":{"__typename":"File","relativeDirectory":"architecture","name":"http_requests"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/about/configuration.mdx","frontmatter":{"title":"Configuration"},"rawBody":"---\ntitle: Configuration\ndescription: Configurating XEDI.js\nstatus: New\nsource: 'https://github.com/xedi/sdk-js/blob/master/src/Config/Config.ts'\n---\n\nYou can configure the SDK using the `Xedi.Config` class. This class extends a JavaScript `Map` object, so the usual `get`, `set`, and `delete` methods will work as per the original object. For example, you can configure which `base_url` should be used to contact a API Gateway instance.\n\n```javascript\nXedi.Config.set('base_url', 'https://api.staging.xedi.com');\n```\n\nBelow you will find a list of all configurations.\n\n| Configuration | Default Value | Comments |\n|--------------|---------------|----------|\n| `base_url` | `https://api.xedi.com` | |\n| `refresh_token` | | Set and managed by `Xedi.Auth` |\n| `access_token` | | Set and managed by `Xedi.Auth` |\n","parent":{"__typename":"File","relativeDirectory":"about","name":"configuration"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/about/installation.mdx","frontmatter":{"title":"Installation"},"rawBody":"---\ntitle: Installation\ndescription: Installing the XEDI JavaScript Software Development Kit\n---\n\n**XEDI SDK is currently only available via NPM**\n```shell\nnpm install --save @xedi/sdk-js\n```\n\nAt this moment. This plugin is only supported in browsers.\n```html\n<script src=\"path/to/sdk.min.js\"></script>\n```\n","parent":{"__typename":"File","relativeDirectory":"about","name":"installation"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/development/events.mdx","frontmatter":{"title":"Events"},"rawBody":"---\ntitle: Events\ndescription: Decoupled information sharing\n---\n","parent":{"__typename":"File","relativeDirectory":"development","name":"events"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/development/configuration.mdx","frontmatter":{"title":"Configuration"},"rawBody":"---\ntitle: Configuration\ndescription: Accessing and managing configuration\n---\n","parent":{"__typename":"File","relativeDirectory":"development","name":"configuration"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/development/api.mdx","frontmatter":{"title":"API Classes"},"rawBody":"---\ntitle: API Classes\ndescription: Adding & Modifying API Classes\nstatus: Stable\nsource: 'https://github.com/xedi/sdk-js/blob/master/src/Services/Service.ts'\n---\n\nimport {Flash, Link, Text} from '@primer/components'\nimport {InfoIcon, IssueOpenedIcon} from '@primer/styled-octicons'\nimport InlineCode from '@primer/gatsby-theme-doctocat/src/components/inline-code'\nimport Container from '@primer/gatsby-theme-doctocat/src/components/container'\n\n# Adding API Classes\n\nThere are three main stages to adding a API class:\n\n1. Definition\n2. Resolution\n3. Invocation\n\n## Definition\n\nWithin the `src/Services/` directory you should find a number of files. Most notable for us is the `Service.ts` and `Services.ts` files.\n\n<Flash mb={2}><IssueOpenedIcon /> <Link href=\"https://github.com/xedi/sdk-js/issues/24\">[RFC] Rename `Services` to `API` to more accurately reflect what they are</Link></Flash>\n\n`Service.ts` is the abstract class from which all our \"Service\" classes extend. It is responsible for the construction of the class, for handling the <Link href=\"architecture/events\">classes events</Link>, and holding memory references to the <Link href=\"architecture/configuration\">config bag</Link> and the <Link href=\"architecture/http_requests\">HTTP client</Link>.\n\nWithin `src/Services` create a new file with the same name as the entity it will host. For example, `Example.ts` should look like this:\n\n```typescript\nimport Service from  './Service';\n\n\n/**\n * Example class\n */\nclass Example extends Service\n{\n}\n\nexport default Example;\n```\n\n## Resolution\n\nRemember `src/Services/Services.ts`? This is the first step of building the resolution root for our new class.\n`Services.ts` exports a TypeScript namespace, which allows use to easily import all our \"Services\" into our main class.\n\nFirstly, import your newly created \"Service\" class.\n\n```diff\nimport Accounts from './Accounts';\n-\n+ import Example from './Example';\n+\n```\n\nThen, you should add the imported class to the end of the `export` object.\n```diff\nAccounts,\n-}\n+    Example,\n+}\n```\n\nNext, you need to register your <Link href=\"architecture/singletons\">singleton</Link>. This will ensure configuration and state persistence.\n\n## Invocation\n\nThis is where things start to come together. Locate `src/index.ts` and open it. Inside here, you will find our root object. It is the home of our application container.\n\nThe first step here is to register a <Link href=\"architecture/singletons\">singleton</Link> for your \"Service\" class.\nFind the `boot` method, and go to the bottom of that method. Here we are going to add a binding that the container will use to build a single instance of your class.\n\n```typescript\nthis.singleton('services.example', (app: ContainerInterface, config: Config) => {\n    return new Services.Example(\n        config,\n        app.resolve('client')\n    );\n});\n```\n\nThe counterpart to this registration is the resolution of its abstract definition; here `'services.example'`.\n\nNear the bottom of the root `Xedi` class, add the following function.\n\n```typescript\nstatic get Example(): Services.Example\n{\n    return this.resolveInstance()\n        .resolve('services.example');\n}\n\n```\n\nCongratulations! You can now resolve you new class, statically. If you want, go ahead and jump into the <Link href=\"tooling/debugging\">playground</Link> and type `Xedi.Example`. It should resolve you an instance of your new class and inside, you will find a <Link href=\"architecture/config\">config bag</Link> and a <Link href=\"architecture/http_requests\">HTTP client</Link>.\n\n# Modifying API Classes\n\nYou want to start giving your class some abilities. Depending on your situation, you might be adding a series of CRUD endpoints, or something entirely different. In most cases, you will be sending requests to an instance of the XEDI API Gateway. Most endpoints are the same, but there will be a few caveats and edge-cases. Consider the following examples:\n\n```typescript\nlist() {\n    return this.client\n        .get<JsonResponse<Example>>(`1/examples`)\n        .then((response: AxiosResponse<JsonResponse<Example>>) => {\n            return response.data.data;\n        });\n}\n```\n<Text as=\"p\" mt={2} mb={3} fontSize={1} color=\"gray.5\">An indexing method</Text>\n\nLets look at line three of the above example. In JavaScript this would look like <InlineCode>.get('1/examples')</InlineCode>, so whats the extra stuff? This how we tell TypeScript, what we expect the <Link href=\"architecture/http_requests\">HTTP Client</Link> to return in the promise. Here we tell it we want a `JsonResponse` which itself, must contain an `Example`.\n\n<Flash varient=\"info\" mb={2}>\n<Text fontWeight=\"bold\"><InfoIcon /> What is an <InlineCode>Example</InlineCode>?</Text>\n\nIn this instance, Example is a <Link href=\"development/models\">model</Link>. A model is a simple definition of the data structure we expect. If you aren't familiar with this concept, read the section on <Link href=\"development/models\">models</Link>.\n</Flash>\n\nOn line four, we see that our response expectation is defined again, but this time within an <Link href=\"architecture/http_requests\"><InlineCode>AxiosResponse</InlineCode></Link>. Translated to plain english this reads: <Text as=\"em\">Where <InlineCode>response</InlineCode> is a JSON representation of a Example within an AxiosResponse</Text>. Again, at runtime, this compiles down to nothing, but here in TypeScript it helps us understand the intent of the code.\n","parent":{"__typename":"File","relativeDirectory":"development","name":"api"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/development/models.mdx","frontmatter":{"title":"Models"},"rawBody":"---\ntitle: Models\ndescription: Added & Modifying Models\n---\n\nimport {Text, Link} from '@primer/components'\nimport {FileCodeIcon, CodeIcon} from '@primer/styled-octicons'\n\nModels mean a lot of things to alot of people. Here, they are simple definitions of the data we expect when we refer to a certain entity. At runtime, they provide little benefit, however, in TypeScript, they can help us understand the code that uses them, and ensures we use the correct attribute names when interacting with the data.\n\n## Authoring a Model\n\nModels can be found in the `src/Models` directory. Model files <Text as=\"em\">should</Text> be in title-case, for example `Example.ts` rather than `example.ts`. These files should also then be imported into `Models.ts` and added to the union type defining `Models`.\n\nLets break down the User model and examine how its built.\n\n```typescript\nimport Xuid, { SupportedXuid } from '../Utils/Xuid';\n\n\n/**\n * User\n */\nexport default interface User extends Object {\n    _id: Xuid<SupportedXuid.User>;\n    first_name: string;\n    last_name: string;\n    email: string;\n    contact_no?: number;\n    job_title?: string;\n    avatar?: string;\n    is_active: boolean;\n}\n```\n<Link href=\"https://github.com/xedi/sdk-js/blob/master/src/Models/User.ts\" lineHeight=\"condensedUltra\" fontSize={1}>\n    <CodeIcon mr={2}/>\n    View Source\n</Link>\n\n* Note that whilst this looks like your everyday household JavaScript object, after each line, there is a semi-colon. This tells TypeScript that we have finished defining that attribute.\n* Some attributes have a `?` at the end of the attribute name. This denotes that it is optional.\n* `_id` is using a custom type definition. It is an <Link href=\"/development/utilities#xuid\">XUID</Link> of type `User` as enumerated by the <Link href=\"/development/utilities#supported-xuid\">SupportedXuid</Link> enum.\n","parent":{"__typename":"File","relativeDirectory":"development","name":"models"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/usage/accounts.mdx","frontmatter":{"title":"Accounts"},"rawBody":"---\ntitle: Accounts\ndescription: Using the Accounts API\nstatus: New\nsource: 'https://github.com/xedi/sdk-js/blob/master/src/Services/Accounts.ts'\n---\n\nimport {CheckIcon} from '@primer/styled-octicons'\n\n## Introduction\n\nThe Accounts API allows you to register, and verify a user account.\n\n## Usage\n\n### Register\n\nRegister a User Account\n\n**Parameters**\n\n| Property | Type | Required | Example |\n| :-- | :-- | :-: | :-- |\n| email | String | <CheckIcon color=\"green.5\"/> | t.stark@avengers.org |\n| first_name | String | <CheckIcon color=\"green.5\"/> | Anthony |\n| last_name | String | <CheckIcon color=\"green.5\"/> | Stark |\n| password | String | <CheckIcon color=\"green.5\"/> | izJ7Y0MBwcJ8 |\n| contact_no | String | | (970) 517-1743 x67916 |\n| job_title | String | | Iron Man |\n| avatar | String | | https://assets.avengers.org/images/iron_man.png |\n\n**Usage**\n\n```javascript\nconst user = await Xedi.Accounts.register({\n    email: 't.stark@avengers.org',\n    first_name: 'Anthony',\n    last_name: 'Stark',\n    password: 'izJ7Y0MBwcJ8',\n    contact_no: '(970) 517-1743 x67916',\n    job_title: 'Iron Man',\n    avatar: 'https://assets.avengers.org/images/iron_man.png'\n});\n```\n\n**Response**\n\n```json\n{\n    \"_id\": \"92ac7274-9369-11ea-9521-01002da17977\",\n    \"email\": \"t.stark@avengers.org\",\n    \"first_name\": \"Anthony\",\n    \"last_name\": \"Stark\",\n    \"job_title\": \"Iron Man\",\n    \"contact_no\": \"(970) 517-1743 x67916\",\n    \"avatar\": \"https://assets.avengers.org/images/iron_man.png\",\n    \"created_at\": \"2020-05-11 10:27:03\",\n    \"is_active\": 0\n}\n```\n---\n### Verify\n\nVerify the email address attached to a User account.\n\n**Parameters**\n\n| Property | Type | Required | Example |\n| :-- | :-- | :-: | :-- |\n| verificationToken | String | <CheckIcon color=\"green.5\"/>︎ | de99a620c50f2990e87144735cd357e7\n\n**Usage**\n\n```javascript\nconst user = Xedi.Accounts.verify('de99a620c50f2990e87144735cd357e7');\n```\n\n**Response**\n\n```json\n{\n    \"_id\": \"92ac7274-9369-11ea-9521-01002da17977\",\n    \"email\": \"t.stark@avengers.org\",\n    \"first_name\": \"Anthony\",\n    \"last_name\": \"Start\",\n    \"job_title\": \"Iron Man\",\n    \"contact_no\": \"(970) 517-1743 x67916\",\n    \"avatar\": \"https://assets.avengers.org/images/iron_man.png\",\n    \"created_at\": \"2020-05-11 10:27:03\",\n    \"updated_at\": \"2020-05-11 10:30:14\",\n    \"is_active\": 1\n}\n```\n","parent":{"__typename":"File","relativeDirectory":"usage","name":"accounts"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/usage/users.mdx","frontmatter":{"title":"Users"},"rawBody":"---\ntitle: Users\ndescription: Using the User API\n---\n","parent":{"__typename":"File","relativeDirectory":"usage","name":"users"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/usage/businesses.mdx","frontmatter":{"title":"Businesses"},"rawBody":"---\ntitle: Businesses\ndescription: Using the Businesses API\n---\n","parent":{"__typename":"File","relativeDirectory":"usage","name":"businesses"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/usage/mailboxes.mdx","frontmatter":{"title":"Mailboxes"},"rawBody":"---\ntitle: Mailboxes\ndescription: Using the Mailboxes API\n---\n","parent":{"__typename":"File","relativeDirectory":"usage","name":"mailboxes"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/usage/products.mdx","frontmatter":{"title":"Products"},"rawBody":"---\ntitle: Products\ndescription: Using the Products API\n---\n","parent":{"__typename":"File","relativeDirectory":"usage","name":"products"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/tooling/debugging.mdx","frontmatter":{"title":"Debugging"},"rawBody":"---\ntitle: Debugging\ndescription: How to debug issues\n---\n\nimport {Link} from '@primer/components'\n\nWhilst TypeScript helps us eliminate most of the silly bugs that vanilla JavaScript would allow, there is still room for mistakes to be made. To aid in the discover of these issues, there is a playground provided within the repository.\n\n## Starting the playground\n\nTo initialize the playground, simply run `npm run playground`. You should do this in a separate console window as this is a foreground task. This task will watch your `src` directory for changes, compiles them, and utilizing the `webpack-dev-server`, perform module hot swapping. When the command has finished it's first run, it should prompt you to open your browser to http://localhost:8080.\n\n## Preparing the playground\n\nWhen you open the playground in your browser, you will be presented with a form to configure the it. There will be three fields: API Gateway Address, Login (Email Address), and Password. At this time, Login and Password are required.\n\nOn successful authentication with your choice of API Gateway instance, the form will be replaced with a green tick and instructions to open DevTools and \"start hacking\".\n\n## Using the playground\n\nAs mentioned previous, you need to open your browsers DevTools. From here, you can enter a variety of commands into the console to interact with XEDI.js. A good first command might be retreiving your user record from the <Link href=\"/usage/auth#user\">Auth api</Link>.\n\n```javascript\nconst me = Xedi.Auth.user;\n```\n```javascript\n{\n    \"_id\": \"92ac7274-9369-11ea-9521-01002da17977\",\n    \"email\": \"t.stark@avengers.org\",\n    \"first_name\": \"Anthony\",\n    \"last_name\": \"Start\",\n    \"job_title\": \"Iron Man\",\n    \"contact_no\": \"(970) 517-1743 x67916\",\n    \"avatar\": \"https://assets.avengers.org/images/iron_man.png\",\n    \"created_at\": \"2020-05-11 10:27:03\",\n    \"updated_at\": \"2020-05-11 10:30:14\",\n    \"is_active\": 1\n}\n```\n\nWhen you done, terminate the server running in your console.\n","parent":{"__typename":"File","relativeDirectory":"tooling","name":"debugging"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/usage/auth.mdx","frontmatter":{"title":"Auth"},"rawBody":"---\ntitle: Auth\ndescription: Using the Auth API\nstatus: New\nsource: 'https://github.com/xedi/sdk-js/blob/master/src/Services/Auth.ts'\n---\n\nimport {Link} from '@primer/components'\nimport {CheckIcon} from '@primer/styled-octicons'\n\n# Introduction\n\nThe Auth api controls access to the system. Read more about our <Link href=\"/architecture/authentication\">authentication architecture here</Link>.\n\n# Events\n\nThis service emits events. To learn more about events <Link href=\"/architecture/events\">here</Link>.\n\n## auth_updated\n\nWhen the authentication state changes; `auth_updated` is emitted.\n\n```typescript\ntype AuthenticationUpdatedEvent {\n    method: string;\n    date: {\n        user: User;\n        business?: Business;\n        refresh_token: RefreshToken;\n        access_token: AccessToken;\n    }\n}\n```\n\n## auth_deleted\n\nWhen the authentication state is revoked; `auth_deleted` is emitted.\n\n```typescript\ntype AuthenticationDeletedEvent {\n    method: string;\n}\n```\n\n# Properties\n\n## business\n\nGets the current business context.\n\n```javascript\nconst currentBusiness: Business = Xedi.Auth.business;\n```\n\n## user\n\nGets the logged in user.\n\n```javascript\nconst currentUser: User = Xedi.Auth.user;\n```\n\n# Usage\n\n## login\n\n**Parameters**\n\n| Property | Type | Required | Example |\n| :-- | :-- | :-: | :-- |\n| email | String | <CheckIcon color=\"green.5\"/> | t.stark@avengers.org |\n| password | String | <CheckIcon color=\"green.5\"/> | izJ7Y0MBwcJ8 |\n\n**Usage**\n\n```javascript\nawait Xedi.Auth.login('t.stark@avengers.org', 'izJ7Y0MBwcJ8');\n```\n\n**Events**\n\nEmits `auth_updated` on successful authentication.\n\n**Response**\n\n```typescript\ntype AuthenticationResponse {\n    data: {\n        tokens: {\n            access: AccessToken;\n            refresh: RefreshToken;\n        };\n        user: User;\n    };\n}\n```\n\n## withToken\n\n**Parameters**\n\n| Property | Type | Required | Example |\n| :-- | :-- | :-: | :-- |\n| refreshToken | String | <CheckIcon color=\"green.5\"/> | eyJhbGciO6IkpXVCJ9.e30.Et9HFtf9RY7kkTX1wr4qCyhIf58U |\n\n**Usage**\n\n```javascript\nawait Xedi.Auth.withToken('eyJhbGciO6IkpXVCJ9.e30.Et9HFtf9RY7kkTX1wr4qCyhIf58U');\n```\n\n**Events**\n\nEmits `auth_updated` on successful authentication.\n\n**Response**\n\n```typescript\ntype AuthenticationResponse {\n    data: {\n        tokens: {\n            access: AccessToken;\n            refresh: RefreshToken;\n        };\n        user: User;\n        business?: Business;\n    };\n}\n```\n\n## refreshAccessToken\n\n**Parameters**\n\n`null`\n\n**Usage**\n\n```javascript\nawait Xedi.Auth.refreshAccessToken();\n```\n\n**Events**\n\nEmits `auth_updated` on successful renewal of the authentication state.\n\n**Response**\n\n```typescript\ntype AuthenticationResponse {\n    data: {\n        tokens: {\n            access: AccessToken;\n            refresh: RefreshToken;\n        };\n        user: User;\n        business?: Business;\n    };\n}\n```\n\n## switchContexts\n\n**Parameters**\n\n| Property | Type | Required | Example |\n| :-- | :-- | :-: | :-- |\n| business_uuid | String | <CheckIcon color=\"green.5\"/> | 92ac7274-9369-11ea-9521-01002da17977 |\n\n**Usage**\n\n```javascript\nawait Xedi.Auth.switchContexts('92ac7274-9369-11ea-9521-01002da17977');\n```\n\n**Events**\n\nEmits `auth_updated` on successful updating of the authentication context.\n\n**Response**\n\n```typescript\ntype AuthenticationResponse {\n    data: {\n        tokens: {\n            access: AccessToken;\n            refresh: RefreshToken;\n        };\n        user: User;\n        business: Business;\n    };\n}\n```\n\n## logout\n\nPerminently revoke your refresh token.\n\n**Parameters**\n\n`null`\n\n**Usage**\n\n```javascript\nawait Xedi.Auth.logout();\n```\n\n**Events**\n\nEmits `auth_deleted` on successful revocation of the refresh token.\n\n```json\n{\n    \"method\": \"logout\"\n}\n```\n\n**Response**\n\n`null`\n","parent":{"__typename":"File","relativeDirectory":"usage","name":"auth"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/tooling/build.mdx","frontmatter":{"title":"Build tooling"},"rawBody":"---\ntitle: Build tooling\n---\n","parent":{"__typename":"File","relativeDirectory":"tooling","name":"build"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/tooling/linting.mdx","frontmatter":{"title":"Linting"},"rawBody":"---\ntitle: Linting\ndescription: Finding codesmell\n---\n","parent":{"__typename":"File","relativeDirectory":"tooling","name":"linting"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/tooling/testing.mdx","frontmatter":{"title":"Testing"},"rawBody":"---\ntitle: Testing\ndescription: How to test your code\n---\n\nimport {Text, Link, Flash} from '@primer/components'\nimport {InfoIcon} from '@primer/styled-octicons'\nimport InlineCode from '@primer/gatsby-theme-doctocat/src/components/inline-code'\n\nTesting our code often feels like a chore, or something we leave until last. For most, testing is the mashed potatoes of development. It makes up the majority of the task and isn't the most attractive thing on our plate.\n\nIn this section we'll look at using unit tests to test our code to provide confidence that any changes we make don't break other behaviours within the SDK.\n\n<Flash>\n    <InfoIcon mr={2} />\n    If you are looking for information on manual testing, read the <Link href=\"/tooling/debugging\">debugging</Link> section.\n</Flash>\n\n## Directory Structure\n\nTesting (at the time of writing) focusses on the behaviors of the SDK, rather than a broad spread approach. This maps to how the files and directories are structured. Rather than mimicking the `src` directory structure, the directories are structured based on the hierarchy at runtime. So for `Xedi.Auth`, you would find those tests in `tests/Unit/Auth` and so on.\n\nThrough-out this page, I will continue to use Marvel's Avengers as a subject material. I'm going to test an API that lists the members of the Avengers.\n\nFirst I need a directory, so I will create `tests/Unit/Avengers`.\n\nNext I need to test each function in my Avengers API. At present I have one function, `list()`, so I create `List.test.ts` in my `Avengers` directory.\n\n## Authoring a test\n\nOnce I have my file, I can start writing my test. Because we are using <Link href=\"https://mochajs.org/\">MochaJS</Link> as a testing framework we get a couple of functions included by default.\n\n```typescript\nimport { assert } from 'chai';\nimport { Collection, Avenger } from '../../../src/Models/Models';\nimport Avengers from '../../../src/Services/Avengers';\nimport Axios, { AxiosInstance } from 'axios';\nimport Config from '../../../src/Config/Config;\nimport JsonResponse from '../../../src/Interfaces/JsonResponse;\nimport nock from 'nock';\n\ndescribe('Avengers@list', () => {\n    it('should return a list of avengers', async () => {\n        const positiveResponse: JsonResponse<Collection<Avenger>> = {\n            data: [\n                {\n                    \"_id\": 1,\n                    \"email\": \"t.stark@avengers.org\",\n                    \"first_name\": \"Anthony\",\n                    \"last_name\": \"Stark\",\n                    \"job_title\": \"Iron Man\"\n                },\n                {\n                    \"_id\": 2,\n                    \"email\": \"s.rogers@avengers.org\",\n                    \"first_name\": \"Steve\",\n                    \"last_name\": \"Rogers\",\n                    \"job_title\": \"Captain America\"\n                }\n            ]\n        };\n\n        nock(\"https://api.xedi.com\")\n            .get(\"/1/avengers\")\n            .reply(200, positiveResponse);\n\n        const configBag = new Config();\n        const httpClient: AxiosInstance = new Axios({\n            baseUrl: 'https://api.xedi.com'\n        });\n\n        const avengersAPI = new Avengers(configBag, httpClient);\n\n        const result = await avengersApi.list();\n\n        assert.isArray(result);\n        assert.lengthOf(result, 2);\n    });\n});\n```\n<Text as=\"p\" mt={2} mb={3} fontSize={1} color=\"gray.5\">tests/Unit/Avengers/List.test.ts</Text>\n\nLets examine this test.\n\n* Below the `import` statements is the entrypoint for the framework. In this file we are describing the list functionality of the Avengers API. Therefore, `Avengers@list` is what will appear in the results output.\n\n* We have one behavioural test, in which we assert `it should return a list of avengers`. Because this method contains a <Text as=\"em\">asynchronous</Text> http request, we denote that the this test is also asynchronous with the `async` keyword.\n\n* Personal preference, I have added a fixture at the top of the test. This could easily be done inline or in a separate file.\n\n* We use <Link href=\"https://github.com/nock/nock\">Nock</Link> to intercept requests to the API Gateway and return predefined responses to matching endpoints.\n\n* We then need to setup our class. This concludes the the setup phase of our tests.\n\n* We invoke the subject function `list()` and assign the response to a `const` value.\n\n* We enter the assert phase, and utilize functions from <Link href=\"https://chaijs.com\">Chai.js</Link> to test the response.\n\n<Flash scheme=\"yellow\">\n    <InfoIcon mr={2}/>\n    It's important to remember that Mocha will pass any test that doesn't error. This is the primary reason I've used <InlineCode>async/await</InlineCode> rather than <InlineCode>then/catch</InlineCode>.\n</Flash>\n\n## Running your test\n\nNow that I've written my test, lets see if it will run. Simply run: <InlineCode>npm run test</InlineCode>.\n\nI will also check my code conforms to best-practice. For this run: <InlineCode>npm run lint:tests</InlineCode>. If you want to know more about this, read the section on <Link href=\"/tooling/linting\">Linting</Link>.\n","parent":{"__typename":"File","relativeDirectory":"tooling","name":"testing"}},{"fileAbsolutePath":"/Users/smudge/Code/Xedi/libraries/sdk/js/docs/content/development/utilities.mdx","frontmatter":{"title":"Utilities"},"rawBody":"---\ntitle: Utilities\ndescription: Helper functions and classes\n---\n\nimport {Link, Text} from '@primer/components'\nimport {LinkExternalIcon, CodeIcon} from '@primer/styled-octicons'\n\nThe <Link href=\"https://github.com/xedi/sdk-js/tree/master/src/Utils\">`Utils`<LinkExternalIcon /></Link> directory contains a number of classes which provide help functionality or features when developing aspects of the SDK.\n\n## AuthenticateHeaderParser\n\nAs part of our <Link href=\"/architecture/authentication\">authentication flow</Link> the <Link href=\"https://tools.ietf.org/html/rfc6750#page-9\">`WWW-Authenticate`<LinkExternalIcon /></Link> is returned from the API Gateway. This is provided to us as a single string which makes it difficult to parse.\n```\nBearer realm=\"api.xedi\", error=\"invalid_token\", error_description=\"The access token expired\"\n```\n<Text as=\"p\" mb={3} fontSize={1} color=\"gray.5\">Example WWW-Authenticate header</Text>\n<Text as=\"p\" mb={3}>To simplify the logic of interogating this string, the `AuthenticateHeaderParser` was devised.</Text>\n\n```javascript\nconst authenticateHeader = AuthenticateHeaderParser.parse(headers['www-authenticate']);\n\nauthenticateHeader.realm; // \"api.xedi\"\n\nauthenticateHeader.error; // \"invalid_token\"\n\nauthenticateHeader.error_description; // \"The access token expired\"\n```\n\n## XUID\n\nIdentifing Entities without explicit type attributes across an eco-system like XEDI is problematic at best, impossible in the main. At XEDI, we found an answer to this in the problem of another. <Link href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)\">UUID Version 1<LinkExternalIcon ml={1} /></Link> are consider inherently insecure due to the use of the issuing computers MAC address as the \"node\" component. We seized this vulnerability and turned it on it's head by replacing the node of a UUIDv1 with our own series of hashes. Each hash is tied to an identifier which a service can use to determine what a generic entity is.\n\n## Supported XUIDs\n\nAs above, at XEDI we utilitize a series of known hashes to identify anonymized json objects as certain entities. In TypeScript, we represent these as an Enum known as SupportedXuid. Because this has little to no practical runtime use, we don't include the associated hashes with the inclusion of a supported type.\n","parent":{"__typename":"File","relativeDirectory":"development","name":"utilities"}}]}}}